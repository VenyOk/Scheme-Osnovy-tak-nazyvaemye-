(define-syntax trace-ex
  (syntax-rules ()
    ((_  expression)
     (begin
       (display 'expression)
       (display " => ")
       (let ((x expression))
         (display  x)
         (newline)
         (begin x))))))

(define-syntax test
  (syntax-rules ()
    ((test expression result)
    '(expression result))))

(define (run-test example)
  (begin
    (display (car example))
    (display " ")
    (define value (eval (car example) (interaction-environment)))
    (begin
    (if (equal? value (car (cdr example)))
        (begin
          (display "ok")
          (newline)
          #t)
        (begin
          (display "FAIL")
          (newline)
          (display "Expected ")
          (write (car (cdr example)))
          (newline)
          (display "Returned ")
          (write value)
          (newline)
          #f)))))

(define (run-tests examples)
  (define (loop tests result)
    (if (not (null? tests))
    (if (run-test (car tests))
        (loop (cdr tests) (+ result 1))
        (loop (cdr tests) result))
   (or (= result (length examples)))))
  (loop examples 0))

(define (translate ls)
  (cond ((list? ls) ls)
        ((string? ls) (string->list ls))
        ((vector? ls) (vector->list ls))))

(define (insert ls index elem)
  (define (loop res lis count)
    (if (= index 0)
        (cons elem lis)
        (append (cons elem '()) lis)
        (if (> index count)
            (loop (append res '(list (car lis))) (cdr lis) (+ count 1))
            (append res (cons elem '()) lis))))
  (loop '() ls 0))

(define (ref elements index . elem)
  (if (null? elem)
      (and (not (>= index  (length (translate elements))))
           (list-ref (translate elements) index))           
      (and (not (> index (length (translate elements))))
           (if (list? elements)
               (insert elements index (car elem))
               (if (vector? elements)
                   (list->vector (insert (vector->list elements) index (car elem)))
                   (and (char? (car elem))
                    (list->string (insert (string->list elements) index (car elem)))))))))
                        
(define (factorize oper)
  (if (equal? (car oper) (quote -))
      (if (= (list-ref (car (cdr oper)) 2) 2)
          `(* (- ,(cadadr oper) ,(car (cdaddr oper)))
              (+ ,(cadadr oper) ,( car(cdaddr oper))))
          `(* (- ,(cadadr oper) ,(car (cdaddr oper))) (+ (expt ,(cadadr oper) 2)
          (* ,(cadadr oper) ,(car(cdaddr oper))) (expt ,(car(cdaddr oper)) 2))))
      `(* (+ ,(cadadr oper) ,(car (cdaddr oper))) (+ (- (expt ,(cadadr oper) 2)
      (* ,(cadadr oper) ,(car(cdaddr oper)))) (expt ,(car(cdaddr oper)) 2)))))
