;<Program>  ::= <Articles> <Body> .
;<Articles> ::= <Article> <Articles> | .
;<Article>  ::= define word <Body> end .
;<Body>     ::= if <Body> endif <Body> | integer <Body> | word <Body> | .
(define call/cc call-with-current-continuation)
(define key-words '('if 'endif 'define 'end))
(define (make-stream items . eos)
  (if (null? eos)
      (make-stream items #f)
      (list items (car eos))))

(define (peek stream)
  (if (null? (car stream))
      (cadr stream)
      (caar stream)))

(define (next stream)
  (let ((n (peek stream)))
    (if (not (null? (car stream)))
        (set-car! stream (cdr (car stream))))
    n))

(define (right-symb stream term fault)
  (if (equal? (peek stream) term)
      (next stream)
      (fault #f)))

(define (program stream fault)
    (let ((_articles (articles stream fault))
           (_body (body stream fault)))
      (list _articles _body)))
(define (articles stream fault)
    (cond ((equal? 'define (peek stream))
            (cons (article stream fault) (articles stream fault)))
          (else '())))
(define (article stream fault)
    (let ((_define (right-symb stream 'define fault))
           (_word (next stream)))
      (and (not (or (equal? _word 'define)
                    (equal? _word 'if)
                    (equal? _word 'endif)
                    (equal? _word 'end)))
          
          (let ((_body (body stream fault))
                (_end (right-symb stream 'end fault)))
            (list _word _body)))))
           
(define (body stream fault)
    (cond ((equal? 'if (peek stream))
           (let ((_word (next stream))
                  (_body (body stream fault))
                  (_endif (right-symb stream 'endif fault))
                  (_body-tail (body stream fault)))
             (cons (list 'if _body) _body-tail)))
          ((integer? (peek stream))
           (let ((_integer (next stream))
                  (_tail (body stream fault)))
             (cons _integer _tail)))
          ((and (symbol? (peek stream))  
                (not (equal? (peek stream) 'endif))
                (not (equal? (peek stream) 'end))
                (not (equal? (peek stream) 'define)))
           (let ((_word (next stream))
                  (_body (body stream fault)))
             (cons _word _body)))
          (else '())))

(define (parse tokens)
    (define stream (make-stream (vector->list tokens) "EOF"))
         (call/cc
          (lambda (fault)
            (define res (program stream fault))
            (and (equal? (peek stream) "EOF")
                 res))))
```
